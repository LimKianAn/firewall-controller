---
apiVersion: v1
kind: Namespace
metadata:
  name: firewall

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: firewall-controller
  name: firewall-controller
  namespace: firewall
spec:
  replicas: 1
  selector:
    matchLabels:
      app: firewall-controller
  template:
    metadata:
      labels:
        app: firewall-controller
    spec:
      containers:
      - image: metalstack/firewall-controller
        imagePullPolicy: IfNotPresent
        name: firewall-controller
        resources:
            requests:
              cpu: 100m
              memory: 50m
            limits:
              cpu: 200m
              memory: 1G
        securityContext:
          capabilities:
            add: 
            - "NET_ADMIN"
        volumeMounts:
          - name: run
            mountPath: /run
      - image: jasonish/suricata
        imagePullPolicy: IfNotPresent
        name: suricata
        args:
          - -i
          - eth0
          - -c 
          - /etc/suricata/suricata.yaml
        resources:
            requests:
              cpu: 100m
              memory: 50m
            limits:
              cpu: 200m
              memory: 1G
        securityContext:
          capabilities:
            add:
            - "NET_ADMIN"
        volumeMounts:
          - name: suricata-config-volume
            mountPath: /etc/suricata
          - name: suricata-log
            mountPath: /var/log/suricata
          - name: run
            mountPath: /run
      - image: jasonish/evebox
        imagePullPolicy: IfNotPresent
        name: evebox-agent
        command:
          - evebox
        args:
          - agent
          - -c
          - /etc/evebox/agent.yaml
        resources:
            requests:
              cpu: 100m
              memory: 50m
            limits:
              cpu: 200m
              memory: 1G
        volumeMounts:
          - name: evebox-agent-config-volume
            mountPath: /etc/evebox
          - name: evebox-lib
            mountPath: /var/lib/evebox
          - name: suricata-log
            mountPath: /var/log/suricata
      volumes:
        - name: evebox-agent-config-volume
          configMap:
            name: evebox-agent-config
        - name: suricata-config-volume
          configMap:
            name: suricata-config
        - name: suricata-log
          emptyDir: {}
        - name: evebox-lib
          emptyDir: {}
        - name: run
          emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: evebox-server
  name: evebox-server
  namespace: firewall
spec:
  replicas: 1
  selector:
    matchLabels:
      app: evebox-server
  template:
    metadata:
      labels:
        app: evebox-server
    spec:
      containers:
      - image: jasonish/evebox
        imagePullPolicy: IfNotPresent
        name: evebox-server
        command:
          - evebox
        args:
          - server
          - -c
          - /etc/evebox/evebox.yaml
        ports:
          - containerPort: 5636
            hostPort: 5636
            protocol: TCP
            name: evebox
        resources:
            requests:
              cpu: 100m
              memory: 50m
            limits:
              cpu: 200m
              memory: 1G
        volumeMounts:
          - name: evebox-server-config-volume
            mountPath: /etc/evebox
          - name: evebox-lib
            mountPath: /var/lib/evebox
      volumes:
        - name: evebox-server-config-volume
          configMap:
            name: evebox-server-config
        - name: evebox-lib
          emptyDir: {}
---
kind: Service
apiVersion: v1
metadata:
  name: evebox-server-service
  namespace: firewall
spec:
  selector:
    app: evebox-server
  ports:
  - port: 80
    protocol: TCP
    targetPort: 5636
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: firewall-controller
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - secrets
  - services
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["*"]
- apiGroups:
  - apiextensions.k8s.io
  - ""
  resources:
  - customresourcedefinitions
  - services
  - endpoints
  verbs:
  - get
  - create
  - update
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - metal-stack.io
  resources:
  - networkids
  - firewalls
  - firewalls/status
  - clusterwidenetworkpolicies
  verbs:
  - list
  - get
  - update
  - patch
  - create
  - delete
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: firewall-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: firewall-controller
subjects:
- kind: User
  name: system:serviceaccount:firewall:default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: evebox-agent-config
  namespace: firewall
data:
  agent.yaml: |
    server:
      url: http://evebox-server-service:80
      # Username and password. Note that at this time even with
      # authentication enabled on the EveBox server, agents can still
      # submit events without authenticating. You will need to supply and
      # username and password if running behind a reverse proxy
      # implementing authentication.
      #username: username
      #password: password
    bookmark-directory: "/var/lib/evebox"
    input:
      filename: "/var/log/suricata/eve.json"
    # Custom fields to add to the event. Only top level fields can be set,
    # and only simple values (string, integer) can be set.
    custom-fields:
      # Set a host field. This will override the "host" field set by
      # Suricata if the Suricata "sensor-name" option is set.
      host: "evebox-agent"
      clusterid: "firewall-controller-test"
      projectid: "development"
    # The EveBox agent can add the rule to an event. To do so, list the
    # rule files here.
    rules:
      - /etc/suricata/rules/*.rules

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: evebox-server-config
  namespace: firewall
data:
  evebox.yaml: |
    data-directory: /var/lib/evebox
    http:
      tls:
        enabled: false
    # Database configuration.
    database:
      # Database type: elasticsearch, sqlite.
      type: sqlite
    authentication:
      # Default: false
      # env: EVEBOX_AUTHENTICATION_REQUIRED
      required: no
      # Type of login required:
      # - username         -- just a username...
      # - usernamepassword -- username and password
      # env: EVEBOX_AUTHENTICATION_TYPE
      type: usernamepassword

      # A little message that is displayed in the login dialog.
      #login-message: Some message here...

    # The server can process a log file, eliminating the need for a
    # separate agent process if on the same machine.
    input:
      # Toggle to disable the input without commenting it out.
      enabled: false
      custom-fields:
        # Set a host field. This will override the "host" field set by
        # Suricata if the Suricata "sensor-name" option is set.
        clusterid: "firewall-controller"
        projectid: "testenvironment"

      # The event reader can add rules to events.
      rules:
        - /etc/suricata/rules/*.rules
    geoip:
      disabled: true
    # Event services: links that will be provided on events to link to additonal
    # services.
    event-services:

      # Custom service to link the rule in Scirius.
      - type: custom
        enabled: false
        name: Scirius

        # Only make available for alert types.
        event-types:
          - alert

        # URL template. All eve values can be used.
        url: https://10.16.1.179/rules/rule/{{alert.signature_id}}

      # Custom service to link to Dumpy for full packet capture.
      #
      # This one has no event-types meaning its available for all event types.
      - type: custom
        enabled: false
        name: Dumpy

        # The URL template, {{raw}} expands to the raw eve event as a JSON
        # string which is then url encoded.
        url: http://10.16.1.1:7000/?event={{raw}}

        # Open in new window. The default is the same window.
        target: new

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: suricata-config
  namespace: firewall
data:
  suricata.yaml: |
    %YAML 1.1
    ---

    vars:
      # more specific is better for alert accuracy and performance
      address-groups:
        HOME_NET: "[192.168.0.0/16,10.0.0.0/8,172.16.0.0/12]"
        #HOME_NET: "[192.168.0.0/16]"
        #HOME_NET: "[10.0.0.0/8]"
        #HOME_NET: "[172.16.0.0/12]"
        #HOME_NET: "any"

        EXTERNAL_NET: "!$HOME_NET"
        #EXTERNAL_NET: "any"

        HTTP_SERVERS: "$HOME_NET"
        SMTP_SERVERS: "$HOME_NET"
        SQL_SERVERS: "$HOME_NET"
        DNS_SERVERS: "$HOME_NET"
        TELNET_SERVERS: "$HOME_NET"
        AIM_SERVERS: "$EXTERNAL_NET"
        DC_SERVERS: "$HOME_NET"
        DNP3_SERVER: "$HOME_NET"
        DNP3_CLIENT: "$HOME_NET"
        MODBUS_CLIENT: "$HOME_NET"
        MODBUS_SERVER: "$HOME_NET"
        ENIP_CLIENT: "$HOME_NET"
        ENIP_SERVER: "$HOME_NET"

      port-groups:
        HTTP_PORTS: "80"
        SHELLCODE_PORTS: "!80"
        ORACLE_PORTS: 1521
        SSH_PORTS: 22
        DNP3_PORTS: 20000
        MODBUS_PORTS: 502
        FILE_DATA_PORTS: "[$HTTP_PORTS,110,143]"
        FTP_PORTS: 21
        VXLAN_PORTS: 4789

    ##
    ## Step 2: select outputs to enable
    ##

    # The default logging directory.  Any log or output file will be
    # placed here if its not specified with a full path name. This can be
    # overridden with the -l command line parameter.
    default-log-dir: /var/log/suricata/

    # global stats configuration
    stats:
      enabled: yes
      # The interval field (in seconds) controls at what interval
      # the loggers are invoked.
      interval: 8
      # Add decode events as stats.
      #decoder-events: true
      # Decoder event prefix in stats. Has been 'decoder' before, but that leads
      # to missing events in the eve.stats records. See issue #2225.
      #decoder-events-prefix: "decoder.event"
      # Add stream events as stats.
      #stream-events: false

    # Configure the type of alert (and other) logging you would like.
    outputs:
      # a line based alerts log similar to Snort's fast.log
      - fast:
          enabled: yes
          filename: fast.log
          append: yes
          #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'

      # Extensible Event Format (nicknamed EVE) event log in JSON format
      - eve-log:
          enabled: yes
          filetype: regular
          filename: eve.json


          # include the name of the input pcap file in pcap file processing mode
          pcap-file: false
          community-id: false
          # Seed value for the ID output. Valid values are 0-65535.
          community-id-seed: 0

          xff:
            enabled: no
            # Two operation modes are available, "extra-data" and "overwrite".
            mode: extra-data
            # Two proxy deployments are supported, "reverse" and "forward". In
            # a "reverse" deployment the IP address used is the last one, in a
            # "forward" deployment the first IP address is used.
            deployment: reverse
            # Header name where the actual IP address will be reported, if more
            # than one IP address is present, the last IP address will be the
            # one taken into consideration.
            header: X-Forwarded-For

          types:
            - alert:
                tagged-packets: yes
            - anomaly:
                enabled: yes
                #
                # Choose one or more types of anomaly logging and whether to enable
                # logging of the packet header for packet anomalies.
                types:
                  # decode: no
                  # stream: no
                  # applayer: yes
                #packethdr: no
            - http:
                extended: yes     # enable this for extended logging information
            - dns:
            - tls:
                extended: yes     # enable this for extended logging information
            - files:
                force-magic: no   # force logging magic on all logged files
            - smtp:
            #- dnp3
            - ftp
            #- rdp
            - nfs
            - smb
            - tftp
            - ikev2
            - krb5
            - snmp
            #- sip
            - dhcp:
                enabled: yes
                # When extended mode is on, all DHCP messages are logged
                # with full detail. When extended mode is off (the
                # default), just enough information to map a MAC address
                # to an IP address is logged.
                extended: no
            - ssh
            - stats:
                totals: yes       # stats for all threads merged together
                threads: no       # per thread stats
                deltas: no        # include delta values
            # bi-directional flows
            - flow
            # uni-directional flows
            #- netflow

            # Metadata event type. Triggered whenever a pktvar is saved
            # and will include the pktvars, flowvars, flowbits and
            # flowints.
            #- metadata

      # deprecated - unified2 alert format for use with Barnyard2
      - unified2-alert:
          enabled: no
          # for further options see:
          # https://suricata.readthedocs.io/en/suricata-5.0.0/configuration/suricata-yaml.html#alert-output-for-use-with-barnyard2-unified2-alert

      # a line based log of HTTP requests (no alerts)
      - http-log:
          enabled: no
          filename: http.log
          append: yes
          #extended: yes     # enable this for extended logging information
          #custom: yes       # enabled the custom logging format (defined by customformat)
          #customformat: "%{%D-%H:%M:%S}t.%z %{X-Forwarded-For}i %H %m %h %u %s %B %a:%p -> %A:%P"
          #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'

      # a line based log of TLS handshake parameters (no alerts)
      - tls-log:
          enabled: no  # Log TLS connections.
          filename: tls.log # File to store TLS logs.
          append: yes
          #extended: yes     # Log extended information like fingerprint
          #custom: yes       # enabled the custom logging format (defined by customformat)
          #customformat: "%{%D-%H:%M:%S}t.%z %a:%p -> %A:%P %v %n %d %D"
          #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'
          # output TLS transaction where the session is resumed using a
          # session id
          #session-resumption: no

      # output module to store certificates chain to disk
      - tls-store:
          enabled: no
          #certs-log-dir: certs # directory to store the certificates files
      - pcap-log:
          enabled: no
          filename: log.pcap

          # File size limit.  Can be specified in kb, mb, gb.  Just a number
          # is parsed as bytes.
          limit: 1000mb

          # If set to a value will enable ring buffer mode. Will keep Maximum of "max-files" of size "limit"
          max-files: 2000

          # Compression algorithm for pcap files. Possible values: none, lz4.
          # Enabling compression is incompatible with the sguil mode. Note also
          # that on Windows, enabling compression will *increase* disk I/O.
          compression: none

          # Further options for lz4 compression. The compression level can be set
          # to a value between 0 and 16, where higher values result in higher
          # compression.
          #lz4-checksum: no
          #lz4-level: 0

          mode: normal # normal, multi or sguil.

          # Directory to place pcap files. If not provided the default log
          # directory will be used. Required for "sguil" mode.
          #dir: /nsm_data/

          #ts-format: usec # sec or usec second format (default) is filename.sec usec is filename.sec.usec
          use-stream-depth: no #If set to "yes" packets seen after reaching stream inspection depth are ignored. "no" logs all packets
          honor-pass-rules: no # If set to "yes", flows in which a pass rule matched will stopped being logged.

      # a full alerts log containing much information for signature writers
      # or for investigating suspected false positives.
      - alert-debug:
          enabled: no
          filename: alert-debug.log
          append: yes
          #filetype: regular # 'regular', 'unix_stream' or 'unix_dgram'

      # alert output to prelude (https://www.prelude-siem.org/) only
      # available if Suricata has been compiled with --enable-prelude
      - alert-prelude:
          enabled: no
          profile: suricata
          log-packet-content: no
          log-packet-header: yes

      # Stats.log contains data from various counters of the Suricata engine.
      - stats:
          enabled: yes
          filename: stats.log
          append: no       # append to file (yes) or overwrite it (no)
          totals: yes       # stats for all threads merged together
          threads: no       # per thread stats
          null-values: yes  # print counters that have value 0

      # a line based alerts log similar to fast.log into syslog
      - syslog:
          enabled: no
          # reported identity to syslog. If ommited the program name (usually
          # suricata) will be used.
          #identity: "suricata"
          facility: local5
          #level: Info ## possible levels: Emergency, Alert, Critical,
                      ## Error, Warning, Notice, Info, Debug

      # deprecated a line based information for dropped packets in IPS mode
      - drop:
          enabled: no
      - file-store:
          version: 2
          enabled: no
          xff:
            enabled: no
            # Two operation modes are available, "extra-data" and "overwrite".
            mode: extra-data
            # Two proxy deployments are supported, "reverse" and "forward". In
            # a "reverse" deployment the IP address used is the last one, in a
            # "forward" deployment the first IP address is used.
            deployment: reverse
            # Header name where the actual IP address will be reported, if more
            # than one IP address is present, the last IP address will be the
            # one taken into consideration.
            header: X-Forwarded-For

      # deprecated - file-store v1
      - file-store:
          enabled: no
          # further options documented at:
          # https://suricata.readthedocs.io/en/suricata-5.0.0/file-extraction/file-extraction.html#file-store-version-1

      - tcp-data:
          enabled: no
          type: file
          filename: tcp-data.log

      - http-body-data:
          enabled: no
          type: file
          filename: http-data.log

      - lua:
          enabled: no
          #scripts-dir: /etc/suricata/lua-output/
          scripts:
          #   - script1.lua

    # Logging configuration.  This is not about logging IDS alerts/events, but
    # output about what Suricata is doing, like startup messages, errors, etc.
    logging:
      # The default log level, can be overridden in an output section.
      # Note that debug level logging will only be emitted if Suricata was
      # compiled with the --enable-debug configure option.
      #
      # This value is overridden by the SC_LOG_LEVEL env var.
      default-log-level: notice

      # The default output format.  Optional parameter, should default to
      # something reasonable if not provided.  Can be overridden in an
      # output section.  You can leave this out to get the default.
      #
      # This value is overridden by the SC_LOG_FORMAT env var.
      #default-log-format: "[%i] %t - (%f:%l) <%d> (%n) -- "

      # A regex to filter output.  Can be overridden in an output section.
      # Defaults to empty (no filter).
      #
      # This value is overridden by the SC_LOG_OP_FILTER env var.
      default-output-filter:

      # Define your logging outputs.  If none are defined, or they are all
      # disabled you will get the default - console output.
      outputs:
      - console:
          enabled: yes
          # type: json
      - file:
          enabled: yes
          level: info
          filename: suricata.log
          # type: json
      - syslog:
          enabled: no
          facility: local5
          format: "[%i] <%d> -- "
          # type: json


    ##
    ## Step 4: configure common capture settings
    ##
    ## See "Advanced Capture Options" below for more options, including NETMAP
    ## and PF_RING.
    ##

    # Linux high speed capture support
    af-packet:
      - interface: eth0
        # Number of receive threads. "auto" uses the number of cores
        #threads: auto
        # Default clusterid. AF_PACKET will load balance packets based on flow.
        cluster-id: 99
        cluster-type: cluster_flow
        # In some fragmentation case, the hash can not be computed. If "defrag" is set
        # to yes, the kernel will do the needed defragmentation before sending the packets.
        defrag: yes
      - interface: default
        #threads: auto
        #use-mmap: no
        #tpacket-v3: yes

    # Cross platform libpcap capture support
    pcap:
      - interface: eth0
      - interface: default
        #checksum-checks: auto

    # Settings for reading pcap files
    pcap-file:
      checksum-checks: auto

    app-layer:
      protocols:
        krb5:
          enabled: yes
        snmp:
          enabled: yes
        ikev2:
          enabled: yes
        tls:
          enabled: yes
          detection-ports:
            dp: 443
        dcerpc:
          enabled: yes
        ftp:
          enabled: yes
          # memcap: 64mb
        # RDP, disabled by default.
        rdp:
          #enabled: no
        ssh:
          enabled: yes
        smtp:
          enabled: yes
          raw-extraction: no
          # Configure SMTP-MIME Decoder
          mime:
            # Decode MIME messages from SMTP transactions
            # (may be resource intensive)
            # This field supercedes all others because it turns the entire
            # process on or off
            decode-mime: yes

            # Decode MIME entity bodies (ie. base64, quoted-printable, etc.)
            decode-base64: yes
            decode-quoted-printable: yes

            # Maximum bytes per header data value stored in the data structure
            # (default is 2000)
            header-value-depth: 2000

            # Extract URLs and save in state data structure
            extract-urls: yes
            # Set to yes to compute the md5 of the mail body. You will then
            # be able to journalize it.
            body-md5: no
          # Configure inspected-tracker for file_data keyword
          inspected-tracker:
            content-limit: 100000
            content-inspect-min-size: 32768
            content-inspect-window: 4096
        imap:
          enabled: detection-only
        smb:
          enabled: yes
          detection-ports:
            dp: 139, 445

          # Stream reassembly size for SMB streams. By default track it completely.
          #stream-depth: 0

        nfs:
          enabled: yes
        tftp:
          enabled: yes
        dns:
          # memcaps. Globally and per flow/state.
          #global-memcap: 16mb
          #state-memcap: 512kb

          # How many unreplied DNS requests are considered a flood.
          # If the limit is reached, app-layer-event:dns.flooded; will match.
          #request-flood: 500

          tcp:
            enabled: yes
            detection-ports:
              dp: 53
          udp:
            enabled: yes
            detection-ports:
              dp: 53
        http:
          enabled: yes
          libhtp:
            default-config:
              personality: IDS

              # Can be specified in kb, mb, gb.  Just a number indicates
              # it's in bytes.
              request-body-limit: 100kb
              response-body-limit: 100kb

              # inspection limits
              request-body-minimal-inspect-size: 32kb
              request-body-inspect-window: 4kb
              response-body-minimal-inspect-size: 40kb
              response-body-inspect-window: 16kb

              # response body decompression (0 disables)
              response-body-decompress-layer-limit: 2

              # auto will use http-body-inline mode in IPS mode, yes or no set it statically
              http-body-inline: auto

              swf-decompression:
                enabled: yes
                type: both
                compress-depth: 0
                decompress-depth: 0

              double-decode-path: no
              double-decode-query: no

            server-config:

        modbus:
          enabled: no
          detection-ports:
            dp: 502
          stream-depth: 0

        # DNP3
        dnp3:
          enabled: no
          detection-ports:
            dp: 20000

        # SCADA EtherNet/IP and CIP protocol support
        enip:
          enabled: no
          detection-ports:
            dp: 44818
            sp: 44818

        ntp:
          enabled: yes

        dhcp:
          enabled: yes

        # SIP, disabled by default.
        sip:
          #enabled: no

    # Limit for the maximum number of asn1 frames to decode (default 256)
    asn1-max-frames: 256
    coredump:
      max-dump: unlimited

    host-mode: auto
    unix-command:
      enabled: true
      filename: /run/suricata-command.socket

    legacy:
      uricontent: enabled

    engine-analysis:
      # enables printing reports for fast-pattern for every rule.
      rules-fast-pattern: yes
      # enables printing reports for each rule
      rules: yes

    #recursion and match limits for PCRE where supported
    pcre:
      match-limit: 3500
      match-limit-recursion: 1500

    host-os-policy:
      # Make the default policy windows.
      windows: [0.0.0.0/0]
      bsd: []
      bsd-right: []
      old-linux: []
      linux: []
      old-solaris: []
      solaris: []
      hpux10: []
      hpux11: []
      irix: []
      macos: []
      vista: []
      windows2k3: []

    # Defrag settings:

    defrag:
      memcap: 32mb
      hash-size: 65536
      trackers: 65535 # number of defragmented flows to follow
      max-frags: 65535 # number of fragments to keep (higher than trackers)
      prealloc: yes
      timeout: 60

    flow:
      memcap: 128mb
      hash-size: 65536
      prealloc: 10000
      emergency-recovery: 30
      #managers: 1 # default to one flow manager
      #recyclers: 1 # default to one flow recycler thread

    vlan:
      use-for-tracking: true

    flow-timeouts:

      default:
        new: 30
        established: 300
        closed: 0
        bypassed: 100
        emergency-new: 10
        emergency-established: 100
        emergency-closed: 0
        emergency-bypassed: 50
      tcp:
        new: 60
        established: 600
        closed: 60
        bypassed: 100
        emergency-new: 5
        emergency-established: 100
        emergency-closed: 10
        emergency-bypassed: 50
      udp:
        new: 30
        established: 300
        bypassed: 100
        emergency-new: 10
        emergency-established: 100
        emergency-bypassed: 50
      icmp:
        new: 30
        established: 300
        bypassed: 100
        emergency-new: 10
        emergency-established: 100
        emergency-bypassed: 50

    stream:
      memcap: 64mb
      checksum-validation: yes      # reject wrong csums
      inline: auto                  # auto will use inline mode in IPS mode, yes or no set it statically
      reassembly:
        memcap: 256mb
        depth: 1mb                  # reassemble 1mb into a stream
        toserver-chunk-size: 2560
        toclient-chunk-size: 2560
        randomize-chunk-size: yes
        #randomize-chunk-range: 10
        #raw: yes
        #segment-prealloc: 2048
        #check-overlap-different-data: true

    # Host table:
    #
    # Host table is used by tagging and per host thresholding subsystems.
    #
    host:
      hash-size: 4096
      prealloc: 1000
      memcap: 32mb

    # IP Pair table:
    #
    # Used by xbits 'ippair' tracking.
    #
    #ippair:
    #  hash-size: 4096
    #  prealloc: 1000
    #  memcap: 32mb

    # Decoder settings

    decoder:
      # Teredo decoder is known to not be completely accurate
      # as it will sometimes detect non-teredo as teredo.
      teredo:
        enabled: true
      # VXLAN decoder is assigned to up to 4 UDP ports. By default only the
      # IANA assigned port 4789 is enabled.
      vxlan:
        enabled: true
        ports: $VXLAN_PORTS # syntax: '8472, 4789'

    detect:
      profile: medium
      custom-values:
        toclient-groups: 3
        toserver-groups: 25
      sgh-mpm-context: auto
      inspection-recursion-limit: 3000
      # If set to yes, the loading of signatures will be made after the capture
      # is started. This will limit the downtime in IPS mode.
      #delayed-detect: yes

      prefilter:
        # default prefiltering setting. "mpm" only creates MPM/fast_pattern
        # engines. "auto" also sets up prefilter engines for other keywords.
        # Use --list-keywords=all to see which keywords support prefiltering.
        default: mpm

      # the grouping values above control how many groups are created per
      # direction. Port whitelisting forces that port to get it's own group.
      # Very common ports will benefit, as well as ports with many expensive
      # rules.
      grouping:
        #tcp-whitelist: 53, 80, 139, 443, 445, 1433, 3306, 3389, 6666, 6667, 8080
        #udp-whitelist: 53, 135, 5060

      profiling:
        # Log the rules that made it past the prefilter stage, per packet
        # default is off. The threshold setting determines how many rules
        # must have made it past pre-filter for that rule to trigger the
        # logging.
        #inspect-logging-threshold: 200
        grouping:
          dump-to-disk: false
          include-rules: false      # very verbose
          include-mpm-stats: false

    mpm-algo: auto


    spm-algo: auto

    # Suricata is multi-threaded. Here the threading can be influenced.
    threading:
      set-cpu-affinity: no
      cpu-affinity:
        - management-cpu-set:
            cpu: [ 0 ]  # include only these CPUs in affinity settings
        - receive-cpu-set:
            cpu: [ 0 ]  # include only these CPUs in affinity settings
        - worker-cpu-set:
            cpu: [ "all" ]
            mode: "exclusive"
            # Use explicitely 3 threads and don't compute number by using
            # detect-thread-ratio variable:
            # threads: 3
            prio:
              low: [ 0 ]
              medium: [ "1-2" ]
              high: [ 3 ]
              default: "medium"
      detect-thread-ratio: 0.2

    luajit:
      states: 128

    # Profiling settings. Only effective if Suricata has been built with the
    # the --enable-profiling configure flag.
    #
    profiling:
      # Run profiling for every xth packet. The default is 1, which means we
      # profile every packet. If set to 1000, one packet is profiled for every
      # 1000 received.
      #sample-rate: 1000

      # rule profiling
      rules:

        # Profiling can be disabled here, but it will still have a
        # performance impact if compiled in.
        enabled: yes
        filename: rule_perf.log
        append: yes

        # Sort options: ticks, avgticks, checks, matches, maxticks
        # If commented out all the sort options will be used.
        #sort: avgticks

        # Limit the number of sids for which stats are shown at exit (per sort).
        limit: 10

        # output to json
        json: yes

      # per keyword profiling
      keywords:
        enabled: yes
        filename: keyword_perf.log
        append: yes

      prefilter:
        enabled: yes
        filename: prefilter_perf.log
        append: yes

      # per rulegroup profiling
      rulegroups:
        enabled: yes
        filename: rule_group_perf.log
        append: yes

      # packet profiling
      packets:

        # Profiling can be disabled here, but it will still have a
        # performance impact if compiled in.
        enabled: yes
        filename: packet_stats.log
        append: yes

        # per packet csv output
        csv:

          # Output can be disabled here, but it will still have a
          # performance impact if compiled in.
          enabled: no
          filename: packet_stats.csv

      # profiling of locking. Only available when Suricata was built with
      # --enable-profiling-locks.
      locks:
        enabled: no
        filename: lock_stats.log
        append: yes

      pcap-log:
        enabled: no
        filename: pcaplog_stats.log
        append: yes
    nfq:
    nflog:
        # netlink multicast group
        # (the same as the iptables --nflog-group param)
        # Group 0 is used by the kernel, so you can't use it
      - group: 2
        # netlink buffer size
        buffer-size: 18432
        # put default value here
      - group: default
        # set number of packet to queue inside kernel
        qthreshold: 1
        # set the delay before flushing packet in the queue inside kernel
        qtimeout: 100
        # netlink max buffer size
        max-size: 20000

    ##
    ## Advanced Capture Options
    ##

    # general settings affecting packet capture
    capture:
    netmap:
      # To specify OS endpoint add plus sign at the end (e.g. "eth0+")
    - interface: eth2
    - interface: default

    # PF_RING configuration. for use with native PF_RING support
    # for more info see http://www.ntop.org/products/pf_ring/
    pfring:
      - interface: eth0
        # Number of receive threads. If set to 'auto' Suricata will first try
        # to use CPU (core) count and otherwise RSS queue count.
        threads: auto

        # Default clusterid.  PF_RING will load balance packets based on flow.
        # All threads/processes that will participate need to have the same
        # clusterid.
        cluster-id: 99

        # Default PF_RING cluster type. PF_RING can load balance per flow.
        # Possible values are cluster_flow or cluster_round_robin.
        cluster-type: cluster_flow

      - interface: default
        #threads: 2
    ipfw:


    napatech:
        streams: ["0-3"]
        auto-config: yes

        ports: [all]
        hashmode: hash5tuplesorted

    default-rule-path: /var/lib/suricata/rules
    rule-files:
      - suricata.rules
    classification-file: /etc/suricata/classification.config
    reference-config-file: /etc/suricata/reference.config

